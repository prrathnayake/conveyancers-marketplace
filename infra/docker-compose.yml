version: "3.9"

x-common-env: &common-env
  env_file:
    - ../.env

services:
  nginx:
    <<: *common-env
    image: nginx:1.25-alpine
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./tls:/etc/nginx/tls
    ports: ["80:80", "443:443"]
    command: >-
      /bin/sh -c '
      if [ ! -f /etc/nginx/tls/dev.crt ] || [ ! -f /etc/nginx/tls/dev.key ]; then
        echo "Generating development TLS certificates...";
        if [ -x /etc/nginx/tls/dev_certs.sh ]; then
          /etc/nginx/tls/dev_certs.sh;
        else
          mkdir -p /etc/nginx/tls;
          rm -f /etc/nginx/tls/dev.crt /etc/nginx/tls/dev.key;
          openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout /etc/nginx/tls/dev.key \
            -out /etc/nginx/tls/dev.crt \
            -subj "/C=AU/ST=VIC/L=Melbourne/O=Convey/OU=Dev/CN=localhost";
        fi;
      fi;
      exec nginx -g "daemon off;";
      '
    depends_on: [frontend, gateway]
  postgres:
    <<: *common-env
    image: postgres:16-alpine
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ../backend/sql/1_schema.sql:/docker-entrypoint-initdb.d/1_schema.sql:ro
      - ../backend/sql/2_seed.sql:/docker-entrypoint-initdb.d/2_seed.sql:ro
    ports: ["5432:5432"]
  redis:
    <<: *common-env
    image: redis:7-alpine
    ports: ["6379:6379"]
  minio:
    <<: *common-env
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    volumes: [ "miniodata:/data" ]
    ports: ["9000:9000","9001:9001"]
  clamav:
    <<: *common-env
    image: clamav/clamav:1.2
    ports: ["3310:3310"]
  otel:
    <<: *common-env
    image: otel/opentelemetry-collector-contrib:0.93.0
    command: ["--config=/etc/otel-config.yaml"]
    volumes:
      - ./otel/otel-config.yaml:/etc/otel-config.yaml:ro
    ports: ["4317:4317", "8888:8888"]
  loki:
    <<: *common-env
    image: grafana/loki:2.9.8
    command: -config.file=/etc/loki/local-config.yaml
    ports: ["3100:3100"]
  prom:
    <<: *common-env
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prom.yml:/etc/prometheus/prometheus.yml:ro
    ports: ["9090:9090"]
  grafana:
    <<: *common-env
    image: grafana/grafana:10.4.3
    ports: ["3000:3000"]
    depends_on: [prom, loki]
  frontend:
    <<: *common-env
    build:
      context: ..
      dockerfile: frontend/Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV}
      NEXT_TELEMETRY_DISABLED: ${NEXT_TELEMETRY_DISABLED}
      GATEWAY_ORIGIN: ${GATEWAY_ORIGIN}
      JWT_SECRET: ${JWT_SECRET}
      CHAT_ENCRYPTION_KEY: ${CHAT_ENCRYPTION_KEY}
      ADMIN_SEED_EMAIL: ${ADMIN_SEED_EMAIL}
      ADMIN_SEED_PASSWORD: ${ADMIN_SEED_PASSWORD}
      ADMIN_SEED_PASSWORD_HASH: ${ADMIN_SEED_PASSWORD_HASH}
      PLATFORM_DATA_DIR: ${PLATFORM_DATA_DIR}
    depends_on: [gateway]
    volumes:
      - ../data:/workspace/data
  admin-portal:
    <<: *common-env
    build:
      context: ..
      dockerfile: admin-portal/Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV}
      NEXT_TELEMETRY_DISABLED: ${NEXT_TELEMETRY_DISABLED}
      NEXT_PUBLIC_MAIN_APP_URL: ${NEXT_PUBLIC_MAIN_APP_URL}
      JWT_SECRET: ${JWT_SECRET}
      CHAT_ENCRYPTION_KEY: ${CHAT_ENCRYPTION_KEY}
      LOG_DIRECTORY: ${LOG_DIRECTORY}
      ADMIN_SEED_EMAIL: ${ADMIN_SEED_EMAIL}
      ADMIN_SEED_PASSWORD: ${ADMIN_SEED_PASSWORD}
      ADMIN_SEED_PASSWORD_HASH: ${ADMIN_SEED_PASSWORD_HASH}
      PLATFORM_DATA_DIR: ${PLATFORM_DATA_DIR}
    depends_on: [gateway]
    ports: ["4300:4300"]
    volumes:
      - ../data:/workspace/data
      - ../logs:/workspace/logs:ro
  gateway:
    <<: *common-env
    build:
      context: ../backend
      dockerfile: gateway/Dockerfile
    environment:
      DB_URL: ${DB_URL}
      REDIS_URL: ${REDIS_URL}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      JWT_SECRET: ${JWT_SECRET}
      IDENTITY_HOST: ${IDENTITY_HOST}
      IDENTITY_PORT: ${IDENTITY_PORT}
      PSP_PROVIDER: ${PSP_PROVIDER}
      PSP_SECRET: ${PSP_SECRET}
    depends_on: [postgres, redis, minio, identity, jobs, payments]
    ports: ["8080:8080"]
  identity:
    <<: *common-env
    build:
      context: ../backend
      dockerfile: services/identity/Dockerfile
    environment:
      DB_URL: ${DB_URL}
      JWT_SECRET: ${JWT_SECRET}
    depends_on: [postgres]
  jobs:
    <<: *common-env
    build:
      context: ../backend
      dockerfile: services/jobs/Dockerfile
    environment:
      DB_URL: ${DB_URL}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      CLAMAV_HOST: ${CLAMAV_HOST}
      CLAMAV_PORT: ${CLAMAV_PORT}
    depends_on: [postgres, minio, clamav]
    ports: ["9002:9002"]  # WebSocket chat
  payments:
    <<: *common-env
    build:
      context: ../backend
      dockerfile: services/payments/Dockerfile
    environment:
      DB_URL: ${DB_URL}
      PSP_PROVIDER: ${PSP_PROVIDER}
      PSP_SECRET: ${PSP_SECRET}
    depends_on: [postgres]
volumes:
  pgdata: {}
  miniodata: {}
