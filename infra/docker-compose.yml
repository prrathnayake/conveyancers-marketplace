version: "3.9"

x-common-env: &common-env
  env_file:
    - ../.env

x-service-defaults: &service-defaults
  <<: *common-env
  restart: unless-stopped
  security_opt:
    - no-new-privileges:true

services:
  nginx:
    <<: *service-defaults
    image: nginx:1.25-alpine
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./tls:/etc/nginx/tls
    ports: ["80:80", "443:443"]
    command: >-
      /bin/sh -c '
      if [ ! -f /etc/nginx/tls/dev.crt ] || [ ! -f /etc/nginx/tls/dev.key ]; then
        echo "Generating development TLS certificates...";
        if [ -x /etc/nginx/tls/dev_certs.sh ]; then
          /etc/nginx/tls/dev_certs.sh;
        else
          mkdir -p /etc/nginx/tls;
          rm -f /etc/nginx/tls/dev.crt /etc/nginx/tls/dev.key;
          openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout /etc/nginx/tls/dev.key \
            -out /etc/nginx/tls/dev.crt \
            -subj "/C=AU/ST=VIC/L=Melbourne/O=Convey/OU=Dev/CN=localhost";
        fi;
      fi;
      exec nginx -g "daemon off;";
      '
    depends_on:
      frontend:
        condition: service_healthy
      gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://127.0.0.1 || exit 1"]
      interval: 30s
      timeout: 5s
      start_period: 10s
      retries: 5
  postgres:
    <<: *service-defaults
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ../backend/sql/1_schema.sql:/docker-entrypoint-initdb.d/1_schema.sql:ro
      - ../backend/sql/2_seed.sql:/docker-entrypoint-initdb.d/2_seed.sql:ro
    ports: ["5432:5432"]
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h 127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
  frontend:
    <<: *service-defaults
    build:
      context: ..
      dockerfile: frontend/Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV}
      NEXT_TELEMETRY_DISABLED: ${NEXT_TELEMETRY_DISABLED}
      GATEWAY_ORIGIN: ${GATEWAY_ORIGIN}
      JWT_SECRET: ${JWT_SECRET}
      CHAT_ENCRYPTION_KEY: ${CHAT_ENCRYPTION_KEY}
      ADMIN_SEED_EMAIL: ${ADMIN_SEED_EMAIL}
      ADMIN_SEED_PASSWORD: ${ADMIN_SEED_PASSWORD}
      ADMIN_SEED_PASSWORD_HASH: ${ADMIN_SEED_PASSWORD_HASH}
      DB_URL: ${DB_URL}
    depends_on:
      gateway:
        condition: service_healthy
      postgres:
        condition: service_healthy
  admin-portal:
    <<: *service-defaults
    build:
      context: ..
      dockerfile: admin-portal/Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV}
      NEXT_TELEMETRY_DISABLED: ${NEXT_TELEMETRY_DISABLED}
      NEXT_PUBLIC_MAIN_APP_URL: ${NEXT_PUBLIC_MAIN_APP_URL}
      JWT_SECRET: ${JWT_SECRET}
      CHAT_ENCRYPTION_KEY: ${CHAT_ENCRYPTION_KEY}
      LOG_DIRECTORY: ${LOG_DIRECTORY}
      ADMIN_SEED_EMAIL: ${ADMIN_SEED_EMAIL}
      ADMIN_SEED_PASSWORD: ${ADMIN_SEED_PASSWORD}
      ADMIN_SEED_PASSWORD_HASH: ${ADMIN_SEED_PASSWORD_HASH}
      DB_URL: ${DB_URL}
    depends_on:
      gateway:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports: ["4300:4300"]
    volumes:
      - ../logs:/workspace/logs:ro
  gateway:
    <<: *service-defaults
    build:
      context: ../backend
      dockerfile: gateway/Dockerfile
    environment:
      DB_URL: ${DB_URL}
      JWT_SECRET: ${JWT_SECRET}
      IDENTITY_HOST: ${IDENTITY_HOST}
      IDENTITY_PORT: ${IDENTITY_PORT}
      PSP_PROVIDER: ${PSP_PROVIDER}
      PSP_SECRET: ${PSP_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      identity:
        condition: service_healthy
      jobs:
        condition: service_healthy
      payments:
        condition: service_healthy
    ports: ["8080:8080"]
  identity:
    <<: *service-defaults
    build:
      context: ../backend
      dockerfile: services/identity/Dockerfile
    environment:
      DB_URL: ${DB_URL}
      JWT_SECRET: ${JWT_SECRET}
      IDENTITY_PORT: ${IDENTITY_PORT:-7001}
    depends_on:
      postgres:
        condition: service_healthy
  jobs:
    <<: *service-defaults
    build:
      context: ../backend
      dockerfile: services/jobs/Dockerfile
    environment:
      DB_URL: ${DB_URL}
      JOBS_PORT: ${JOBS_PORT:-9002}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_BUCKET: ${MINIO_BUCKET}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_REGION: ${MINIO_REGION}
      CLAMAV_HOST: ${CLAMAV_HOST}
      CLAMAV_PORT: ${CLAMAV_PORT}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      clamav:
        condition: service_healthy
    ports: ["${JOBS_PORT:-9002}:${JOBS_PORT:-9002}"]  # WebSocket chat
  payments:
    <<: *service-defaults
    build:
      context: ../backend
      dockerfile: services/payments/Dockerfile
    environment:
      DB_URL: ${DB_URL}
      PSP_PROVIDER: ${PSP_PROVIDER}
      PSP_SECRET: ${PSP_SECRET}
      PAYMENTS_PORT: ${PAYMENTS_PORT:-9103}
    depends_on:
      postgres:
        condition: service_healthy
  redis:
    <<: *service-defaults
    image: redis:7.2-alpine
    command:
      ["redis-server", "--save", "60", "1", "--loglevel", "warning", "--requirepass", "${REDIS_PASSWORD}"]
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports: ["6379:6379"]
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
  minio:
    <<: *service-defaults
    image: minio/minio:RELEASE.2024-01-31T20-20-22Z
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: ["server", "/data", "--console-address", ":9001"]
    volumes:
      - miniodata:/data
    ports: ["9000:9000", "9001:9001"]
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:9000/minio/health/live >/dev/null 2>&1 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
  clamav:
    <<: *service-defaults
    image: clamav/clamav:1.3
    ports: ["3310:3310"]
    healthcheck:
      test: ["CMD-SHELL", "clamdscan --version || exit 1"]
      interval: 1m
      timeout: 15s
      retries: 3
      start_period: 30s
  otel:
    <<: *service-defaults
    image: otel/opentelemetry-collector:0.90.1
    command: ["--config=/etc/otelcol/config.yaml"]
    volumes:
      - ./otel/otel-config.yaml:/etc/otelcol/config.yaml:ro
    ports: ["4317:4317", "4318:4318"]
    healthcheck:
      test: ["CMD", "/otelcol", "--version"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
  loki:
    <<: *service-defaults
    image: grafana/loki:2.9.4
    command: ["-config.file=/etc/loki/local-config.yaml"]
    volumes:
      - lokidata:/loki
    ports: ["3100:3100"]
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://127.0.0.1:3100/ready"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
  prometheus:
    <<: *service-defaults
    image: prom/prometheus:v2.48.1
    command:
      ["--config.file=/etc/prometheus/prometheus.yml", "--storage.tsdb.path=/prometheus", "--web.enable-lifecycle"]
    volumes:
      - ./prometheus/prom.yml:/etc/prometheus/prometheus.yml:ro
      - prometheusdata:/prometheus
    ports: ["9090:9090"]
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://127.0.0.1:9090/-/ready"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
  grafana:
    <<: *service-defaults
    image: grafana/grafana:10.3.1
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
    depends_on:
      prometheus:
        condition: service_healthy
      loki:
        condition: service_healthy
    volumes:
      - grafanadata:/var/lib/grafana
    ports: ["3000:3000"]
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://127.0.0.1:3000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 20s
volumes:
  pgdata: {}
  miniodata: {}
  lokidata: {}
  prometheusdata: {}
  grafanadata: {}
