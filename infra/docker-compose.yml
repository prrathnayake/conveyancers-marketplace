version: "3.9"
services:
  nginx:
    image: nginx:1.25-alpine
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./tls:/etc/nginx/tls
    ports: ["80:80", "443:443"]
    command: >-
      /bin/sh -c '
      if [ ! -f /etc/nginx/tls/dev.crt ] || [ ! -f /etc/nginx/tls/dev.key ]; then
        echo "Generating development TLS certificates...";
        if [ -x /etc/nginx/tls/dev_certs.sh ]; then
          /etc/nginx/tls/dev_certs.sh;
        else
          mkdir -p /etc/nginx/tls;
          rm -f /etc/nginx/tls/dev.crt /etc/nginx/tls/dev.key;
          openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout /etc/nginx/tls/dev.key \
            -out /etc/nginx/tls/dev.crt \
            -subj "/C=AU/ST=VIC/L=Melbourne/O=Convey/OU=Dev/CN=localhost";
        fi;
      fi;
      exec nginx -g "daemon off;";
      '
    depends_on: [frontend, gateway]
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-convey}
      POSTGRES_USER: ${POSTGRES_USER:-app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ../backend/sql/1_schema.sql:/docker-entrypoint-initdb.d/1_schema.sql:ro
      - ../backend/sql/2_seed.sql:/docker-entrypoint-initdb.d/2_seed.sql:ro
    ports: ["5432:5432"]
  redis:
    image: redis:7-alpine
    ports: ["6379:6379"]
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes: [ "miniodata:/data" ]
    ports: ["9000:9000","9001:9001"]
  clamav:
    image: clamav/clamav:1.2
    ports: ["3310:3310"]
  otel:
    image: otel/opentelemetry-collector:latest
    command: ["--config=/etc/otel-config.yaml"]
    volumes:
      - ./otel/otel-config.yaml:/etc/otel-config.yaml:ro
    ports: ["4317:4317"]
  loki:
    image: grafana/loki:2.9.8
    command: -config.file=/etc/loki/local-config.yaml
    ports: ["3100:3100"]
  prom:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prom.yml:/etc/prometheus/prometheus.yml:ro
    ports: ["9090:9090"]
  grafana:
    image: grafana/grafana:10.4.3
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
    ports: ["3000:3000"]
    depends_on: [prom, loki]
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: '1'
      GATEWAY_ORIGIN: http://gateway:8080
      PROFILE_FALLBACK_SECRET: ${PROFILE_FALLBACK_SECRET:-}
      PROFILE_FALLBACK_PAYLOAD: ${PROFILE_FALLBACK_PAYLOAD:-}
      ADMIN_SEED_EMAIL: ${ADMIN_SEED_EMAIL:-admin@example.com}
      ADMIN_SEED_PASSWORD: ${ADMIN_SEED_PASSWORD:-super-secure-password}
      ADMIN_SEED_PASSWORD_HASH: ${ADMIN_SEED_PASSWORD_HASH:-}
    depends_on: [gateway]
  admin-portal:
    build:
      context: ..
      dockerfile: admin-portal/Dockerfile
    environment:
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: '1'
      NEXT_PUBLIC_MAIN_APP_URL: ${NEXT_PUBLIC_MAIN_APP_URL:-https://localhost}
      JWT_SECRET: ${JWT_SECRET}
      LOG_DIRECTORY: /workspace/logs
      ADMIN_SEED_EMAIL: ${ADMIN_SEED_EMAIL:-admin@example.com}
      ADMIN_SEED_PASSWORD: ${ADMIN_SEED_PASSWORD:-super-secure-password}
      ADMIN_SEED_PASSWORD_HASH: ${ADMIN_SEED_PASSWORD_HASH:-}
    depends_on: [gateway]
    ports: ["4300:4300"]
    volumes:
      - ../frontend/data:/workspace/frontend/data
      - ../logs:/workspace/logs:ro
  gateway:
    build:
      context: ../backend
      dockerfile: gateway/Dockerfile
    environment:
      DB_URL: postgres://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-convey}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT:-http://minio:9000}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minio}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      JWT_SECRET: ${JWT_SECRET}
      PSP_PROVIDER: ${PSP_PROVIDER:-sandbox}
      PSP_SECRET: ${PSP_SECRET}
    depends_on: [postgres, redis, minio, identity, jobs, payments]
    ports: ["8080:8080"]
  identity:
    build:
      context: ../backend
      dockerfile: services/identity/Dockerfile
    environment:
      DB_URL: postgres://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-convey}
      JWT_SECRET: ${JWT_SECRET}
    depends_on: [postgres]
  jobs:
    build:
      context: ../backend
      dockerfile: services/jobs/Dockerfile
    environment:
      DB_URL: postgres://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-convey}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT:-http://minio:9000}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minio}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      CLAMAV_HOST: ${CLAMAV_HOST:-clamav}
      CLAMAV_PORT: ${CLAMAV_PORT:-3310}
    depends_on: [postgres, minio, clamav]
    ports: ["9002:9002"]  # WebSocket chat
  payments:
    build:
      context: ../backend
      dockerfile: services/payments/Dockerfile
    environment:
      DB_URL: postgres://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-convey}
      PSP_PROVIDER: ${PSP_PROVIDER:-sandbox}
      PSP_SECRET: ${PSP_SECRET}
    depends_on: [postgres]
volumes:
  pgdata: {}
  miniodata: {}
